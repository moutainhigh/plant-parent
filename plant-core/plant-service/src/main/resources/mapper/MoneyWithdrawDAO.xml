<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.moguying.plant.core.dao.account.MoneyWithdrawDAO">
    <resultMap id="BaseResultMap" type="com.moguying.plant.core.entity.account.MoneyWithdraw">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="order_number" jdbcType="VARCHAR" property="orderNumber"/>
        <result column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="withdraw_money" jdbcType="DECIMAL" property="withdrawMoney"/>
        <result column="fee" jdbcType="DECIMAL" property="fee"/>
        <result column="to_account_money" jdbcType="DECIMAL" property="toAccountMoney"/>
        <result column="withdraw_time" jdbcType="TIMESTAMP" property="withdrawTime"/>
        <result column="verify_time" jdbcType="TIMESTAMP" property="verifyTime"/>
        <result column="verify_user" jdbcType="INTEGER" property="verifyUser"/>
        <result column="verify_mark" jdbcType="VARCHAR" property="verifyMark"/>
        <result column="bank_number" jdbcType="VARCHAR" property="bankNumber"/>
        <result column="bank_phone" jdbcType="VARCHAR" property="bankPhone"/>
        <result column="state" jdbcType="INTEGER" property="state"/>
        <result column="seq_no" jdbcType="INTEGER" property="seqNo"/>
        <result column="success_time" jdbcType="INTEGER" property="seqNo"/>
    </resultMap>


    <resultMap id="BaseInfoMap" type="com.moguying.plant.core.entity.account.MoneyWithdraw" extends="BaseResultMap">
        <result column="real_name" jdbcType="VARCHAR" property="realName"/>
    </resultMap>

    <sql id="Base_Column_List">
    id, order_number, user_id, withdraw_money, fee, to_account_money, withdraw_time, 
    verify_time, verify_user, verify_mark, bank_number, `state`,seq_no,success_time,bank_phone
  </sql>


    <select id="selectSelective" resultMap="BaseInfoMap">
        select t1.id, order_number, user_id, withdraw_money, fee, to_account_money, withdraw_time,t1.seq_no,
        verify_time, verify_user, verify_mark, bank_number, bank_phone,t1.`state`,t1.success_time,t2.real_name,t2.phone
        from plant_money_withdraw t1
        left join plant_user t2 on t1.user_id = t2.id
        <where>
            <if test="wq.id != null ">
                t1.id = #{id}
            </if>

            <if test="wq.realName != null and wq.realName != ''">
                <bind name="realNameLike" value="'%'+ wq.realName +'%'"/>
                AND t2.real_name like #{realNameLike}
            </if>
            <if test="wq.bankPhone != null and wq.bankPhone != ''">
                <bind name="bankPhoneLike" value="'%'+ wq.bankPhone +'%'"/>
                AND t1.bank_phone like #{bankPhoneLike}
            </if>
            <if test="wq.orderNumber != null and wq.orderNumber != ''">
                AND t1.order_number = #{orderNumber}
            </if>
            <if test="wq.state != null">
                AND t1.state = #{wq.state}
            </if>
            <if test="wq.inState != null">
                AND t1.state in
                <foreach collection="wq.inState" open="(" close=")" separator="," item="item">
                    #{item}
                </foreach>
            </if>
            <if test="wq.bankNumber != null and wq.bankNumber != ''">
                AND t1.bank_number = #{wq.bankNumber}
            </if>
            <if test="wq.userId != null">
                AND t1.user_id = #{wq.userId}
            </if>
            <if test="wq.phone != null and wq.phone != ''">
                <bind name="phoneLike" value="'%'+ wq.phone +'%'"/>
                AND t2.phone like #{phoneLike}
            </if>
            <if test="wq.startTime != null">
                <![CDATA[
            AND UNIX_TIMESTAMP(withdraw_time) <= UNIX_TIMESTAMP(#{wq.startTime})
        ]]>
            </if>
            <if test="wq.endTime != null">
                <![CDATA[
            AND UNIX_TIMESTAMP(withdraw_time) <= UNIX_TIMESTAMP(#{wq.endTime})
        ]]>
            </if>

        </where>
        order by t1.withdraw_time desc
    </select>

    <select id="selectByOrderNumber" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from plant_money_withdraw
        where order_number = #{orderNumber}
    </select>


    <select id="withdrawDailyCountByUserId" resultType="DECIMAL">
        select sum(withdraw_money) from plant_money_withdraw
        <where>
            <if test="userId != null">
                user_id = #{userId}
            </if>
            <if test="startTime != null and endTime != null">
                <![CDATA[
        AND UNIX_TIMESTAMP(withdraw_time) >= UNIX_TIMESTAMP(#{startTime})
        AND UNIX_TIMESTAMP(withdraw_time) <= UNIX_TIMESTAMP(#{endTime})
      ]]>
            </if>
        </where>
        AND state != 2

    </select>

    <select id="getWithdrawalSuccess" resultType="java.math.BigDecimal">
        select IFNULL(sum(withdraw_money),0)
        from plant_money_withdraw
        <where>
            state = 1
            <if test="state != null ">
                <choose>
                    <when test="state == 1">
                        and date(withdraw_time) = curdate()
                    </when>
                    <when test="state == 2">
                        and date(withdraw_time) = date_sub(curdate(), interval 1 day)
                    </when>
                    <when test="state == 3">
                        and date_format(withdraw_time, '%Y%m') = date_format(curdate(), '%Y%m')
                    </when>
                    <when test="state == 4">
                        and date_format(withdraw_time, '%Y%m') = date_format(date_sub(curdate(), interval 1 month),
                        '%Y%m')
                    </when>
                </choose>
            </if>
        </where>
    </select>

    <select id="getWithdrawalWait" resultType="java.math.BigDecimal">
        select IFNULL(sum(withdraw_money),0)
        from plant_money_withdraw
        <where>
            state = 0
            <if test="state != null ">
                <choose>
                    <when test="state == 1">
                        and date(withdraw_time) = curdate()
                    </when>
                    <when test="state == 2">
                        and date(withdraw_time) = date_sub(curdate(), interval 1 day)
                    </when>
                    <when test="state == 3">
                        and date_format(withdraw_time, '%Y%m') = date_format(curdate(), '%Y%m')
                    </when>
                    <when test="state == 4">
                        and date_format(withdraw_time, '%Y%m') = date_format(date_sub(curdate(), interval 1 month),
                        '%Y%m')
                    </when>
                </choose>
            </if>
        </where>
    </select>
</mapper>